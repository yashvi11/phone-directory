{"version":3,"sources":["serviceWorker.js","header.js","AddSubscriber.js","ShowSubscribers.js","PhoneDirectory.js","index.js"],"names":["Boolean","window","location","hostname","match","header","props","className","heading","AddSusbscriber","inputChangedHandler","e","state","target","name","value","setState","onFormSubmitted","preventDefault","addSubscriberHandler","id","phone","history","push","this","Link","to","onSubmit","bind","htmlFor","type","onChange","Component","ShowSubscribers","onDeletedClick","subscriberId","deleteSubscriberHandler","subscribersList","map","sub","key","onClick","PhoneDirectory","subscriberIndex","forEach","subscriber","index","newSubscribers","splice","subscribers","newSubscriber","length","basename","Route","exact","path","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65226868.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst header = function (props) {\r\n    \r\n    return (\r\n        <div className=\"header\">\r\n            {props.heading}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default header;","import React, { Component } from 'react';\r\nimport Header from './header';\r\nimport './AddSubscriber.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass AddSusbscriber extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            id: 0,\r\n            name: '',\r\n            phone: ''\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = (e) => {\r\n        const state = this.state;\r\n        state[e.target.name] = e.target.value;\r\n        this.setState(state);\r\n    }\r\n\r\n    onFormSubmitted = (e) => {\r\n        e.preventDefault();\r\n        this.props.addSubscriberHandler(this.state);\r\n        this.setState({ id: 0, name: '', phone: ' ' });\r\n        this.props.history.push(\"/\");\r\n    }\r\n\r\n    render() {\r\n\r\n        const { name, phone } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Header heading=\"Add Subscriber\" />\r\n                <div className=\"component-body-container\">\r\n                    \r\n                    <Link to=\"/\">\r\n                        <button className=\"custom-btn\">Back</button>\r\n                    </Link>\r\n                    <form className=\"subscriber-form\" onSubmit={this.onFormSubmitted.bind(this)}>\r\n                        <label htmlFor=\"name\" className=\"label-control\">Name: </label><br />\r\n                        <input id=\"name\" type=\"text\" className=\"input-control\" name=\"name\" onChange={this.inputChangedHandler} /><br /><br />\r\n                        <label htmlFor=\"phone\" className=\"label-control\">Phone: </label><br />\r\n                        <input id=\"phone\" type=\"text\" className=\"input-control\" name=\"phone\" onChange={this.inputChangedHandler} /><br /><br />\r\n\r\n\r\n\r\n                        <div className=\"subscriber-info-container\">\r\n                        <span className=\"subscriber-to-add-heading\">Subscriber to be added: </span><br />\r\n                            <span className=\"subscriber-info\">Name: {name}</span><br />\r\n                            <span className=\"subscriber-info\">Phone: {phone}</span><br />\r\n                        </div>\r\n\r\n                        <button type=\"submit\" className=\"custom-btn add-btn\">Add</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddSusbscriber; ","import React, { Component } from 'react';\r\nimport Header from './header.js';\r\nimport './PhoneDirectory.css';\r\nimport { Link } from 'react-router-dom';\r\nclass ShowSubscribers extends Component {\r\n  onDeletedClick = (subscriberId) => {\r\n    this.props.deleteSubscriberHandler(subscriberId); \r\n  }\r\n  render() {\r\n    return (\r\n        <div>\r\n          <Header heading=\"Phone Directory\" />\r\n          <div className=\"component-body-container\">\r\n          <Link to=\"/add\">\r\n            <button className=\"custom-btn add-btn\">Add</button>\r\n          </Link>\r\n\r\n          <div className=\"grid-container heading-container\">\r\n            <span className=\"grid-item name-heading\">Name</span>\r\n            <span className=\"grid-item phone-heading\">Phone</span>\r\n\r\n          </div>\r\n\r\n          {\r\n             this.props.subscribersList.map(sub => {\r\n                return <div key={sub.id} className=\"grid-container\">\r\n                  <span className=\"grid-item\">{sub.name}</span>\r\n                  <span className=\"grid-item\">{sub.phone}</span>\r\n                  <span className=\"grid-item action-btn-container\">\r\n                  <button className=\"custom-btn delete-btn\" onClick={this.onDeletedClick.bind(this, sub.id)}>Delete</button>\r\n                  </span>\r\n                </div>\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n    \r\n            export default ShowSubscribers;","\nimport React, { Component } from 'react';\nimport AddSubscriber from './AddSubscriber';\nimport ShowSubscribers from './ShowSubscribers';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nclass PhoneDirectory extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            subscribersList: [\n                {\n                    id: 1,\n                    name: \"Shilpa Bhat\",\n                    phone: \"9999999999\"\n                },\n                {\n                    id: 2,\n                    name: \"Srishti Gupta\",\n                    phone: \"8888888888\"\n                }\n            ]\n        }\n    }\n    deleteSubscriberHandler = (subscriberId) => {\n        let subscribersList = this.state.subscribersList;\n        let subscriberIndex = 0;\n        subscribersList.forEach(function (subscriber, index) {\n            if (subscriber.id === subscriberId) {\n                subscriberIndex = index;\n            }\n        }, this);\n        let newSubscribers = subscribersList;\n        newSubscribers.splice(subscriberIndex, 1);\n        this.setState({subscribers: newSubscribers});\n    }\n\n\n    addSubscriberHandler = (newSubscriber) => {\n        let subscribersList = this.state.subscribersList;\n        if (subscribersList.length > 0) {\n            newSubscriber.id = subscribersList[subscribersList.length - 1].id + 1;\n        } else {\n            newSubscriber.id = 1;\n        }\n        subscribersList.push(newSubscriber);\n        this.setState({ subscribersList: subscribersList });\n    }\n\n    render() {\n        return (\n          <Router basename=\"phone-directory\">\n                <div>\n                    <Route exact path=\"/\" render={(props) => <ShowSubscribers {...props} subscribersList={this.state.subscribersList}deleteSubscriberHandler={this.deleteSubscriberHandler}  />} />\n                    <Route exact path=\"/add\" render={({history}, props) => <AddSubscriber history={history} {...props} addSubscriberHandler={this.addSubscriberHandler} deleteSubscriberHandler={this.deleteSubscriberHandler}  />} />\n                </div>\n            </Router>\n            \n        )\n    }\n}\n\nexport default PhoneDirectory; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './common.css';\nimport PhoneDirectory from './PhoneDirectory';\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nReactDOM.render(<PhoneDirectory />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}